from selenium import webdriver
from selenium.webdriver.chrome import service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

import sys
import time
import random
from tkinter import messagebox,Tk
                                  
s = Service("C:\Program Files (x86)\chromedriver.exe")
o = Options()
#o.add_argument("--window-size=1800x2520")
#o.add_argument("--headless")
o.add_argument("start-maximized")
o.add_experimental_option('excludeSwitches', ['enable-logging'])  #fölösleges parancssori figyelmeztetések kikapcsolása
o.add_experimental_option("prefs", {
  "download.default_directory": sys.path[0]+time.strftime("\downloader_%Y_%m_%d_%H%M"),
    #wheter to ask the user before starting download or just download the file automatically
  "download.prompt_for_download": False,
  "download.directory_upgrade": True,
    #warning message appears when visiting a dangerous site or downloading a harmful app:
  "safebrowsing.enabled": True
})

#Here's how I got the .crx file of Allow Right-Click Chrome extension:
#https://stackoverflow.com/questions/34222412/load-chrome-extension-using-selenium
#https://crxextractor.com/
o.add_extension(r".\AllowRightClick_extension_1_5_2_4.crx")

driver = webdriver.Chrome(service=s,options=o)
driver.get('https://uj.jogtar.hu/eduid-login')

#driver.implicitly_wait(1)
driver.switch_to.window(driver.window_handles[0])
driver.close() #closing AllowRightClick install opening screen in focus
driver.switch_to.window(driver.window_handles[0])

try:
    cookie_accept = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.LINK_TEXT, "Elfogadom"))
    )
    cookie_accept.click()

    element = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.ID, "eduid_login_link"))
    )
    element.click()
except:
    print("An exception occurred")

#the newest "Részletes keresés-találatok" tab has the highest tab ID: eg. 1445 in "tab-1445-btnInnerEl"
#we suppose, that the necessary "Részletes keresés-találatok" tab is in focus,
    #and the first downloadable instance is also in focus

#>id< example of 1st and 2nd findings: "gridview-1434-record-31718" "gridview-1434-record-31719"
    #the 2nd number is the >data-recordid<, and changes one-by-one.
    #but sometimes >data-recordid< is replaced
#>data-recordindex< values are constant after a searching, and go from   0 to the  number_of_findings -1
#We want to download as many files as in the "... találat", which has this ID: "id_cimmutato_totacount..?..-inputEl"


root=Tk()
messagebox.showinfo("Information","Press the OK button below when\nyou are READY TO DOWNLOAD files.")
root.destroy()


def wait_find(attribute,value,webdriver=driver,wait_time=5):
    # eg. wait_find(driver,10,By.ID,"main")
    return WebDriverWait(webdriver, wait_time).until(EC.presence_of_element_located((attribute, value)))

def get_tab_idNumbers():
    opened_tabs=wait_find(By.CSS_SELECTOR,"[id^='tab-'][id$='-closeEl']")
    tab_idNumbers=[int(tab.get_attribute('id').split('-')[1]) for tab in opened_tabs]
    return tab_idNumbers

def get_active_tab():
    tabbar_part=wait_find(By.CSS_SELECTOR,"[aria-selected='true'][tabindex='0']")
    tab_id=tabbar_part.get_attribute('id')
    tabpanel_part=wait_find(By.CSS_SELECTOR,f"[aria-labelledby='{tab_id}']")
    return [tab_id,tabbar_part,tabpanel_part]

def close_active_tab():
    tab_id=get_active_tab()[0]
    tab_close=wait_find(By.ID,f'{tab_id}-closeEl')
    tab_close.click()
    
def get_numberOfInstances():
    tabpanel_part=get_active_tab()[2]
    counter = wait_find(By.CSS_SELECTOR,f"[id^='id_cimmutato_totacount'][id*='-inputEl']",tabpanel_part)
    return int(''.join(counter.text.split(' ')[:-1]))


for i in range(get_numberOfInstances()):
    instance = wait_find(By.CSS_SELECTOR,f"[id^='gridview-'][id*='-record-'][data-recordindex='{str(i)}']",get_active_tab()[2])
    instance.click()

    document_tab=get_active_tab()[2]
    
    try:
        time_dropDownList=wait_find(By.CSS_SELECTOR, "[id^='jogszab_combo_idogep_'][id$='-bodyEl']",document_tab)
        time_dropDownList.click()
        foo_value=time_dropDownList.get_attribute('id').split('-')[0]+'-picker'
        items=wait_find(By.CSS_SELECTOR,f"[data-boundview='{foo_value}']")
        items[0].click()  # clicking to "közlönyállapot"
    except:
        #ha nincs közlönyállapot (bár kellene legyen)
        pass
    
    export_icon = wait_find(By.CSS_SELECTOR,"[id^=jogszab_export_]",document_tab)
    export_icon.click()
    
    item_tartalom = driver.find_element(By.ID,"exportalas_beallitasok_checkbox_tartalomjegyzek")
    if item_tartalom.get_attribute("class").split("-")[-1] == 'checked':
        item_tartalom.click()
        
    item_labjegyzet = driver.find_element(By.ID,"exportalas_beallitasok_checkbox_lbj")
    if item_labjegyzet.get_attribute("class").split("-")[-1] == 'checked':
        no_labjegyzet = driver.find_element(By.ID,"exportalas_beallitasok_checkbox_lbj-inputEl")
        no_labjegyzet.click()
        
    item_kepek = driver.find_element(By.ID, "exportalas_beallitasok_checkbox_kepekmegjelennek")
    if item_kepek.get_attribute("class").split("-")[-1] == 'checked':
        no_kepek = driver.find_element(By.ID,"exportalas_beallitasok_checkbox_kepekmegjelennek-boxLabelEl")
        no_kepek.click()
    
    export = wait_find(By.ID,"exportalas_button_export-btnInnerEl")
    export.click()

    close_active_tab()

root=Tk()
answer=messagebox.askokcancel(title="Question", message="Downloading is done. Would you like to exit the browser?")
root.destroy()
if answer:
    driver.quit()
